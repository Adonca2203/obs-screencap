// This code was autogenerated with `dbus-codegen-rust -m none -c blocking`, see https://github.com/diwic/dbus-rs
use dbus;
#[allow(unused_imports)]
use dbus::arg;
use dbus::blocking;

pub trait OrgFreedesktopPortalSession {
    fn close(&self) -> Result<(), dbus::Error>;
    fn version(&self) -> Result<u32, dbus::Error>;
}

impl<'a, T: blocking::BlockingSender, C: ::std::ops::Deref<Target = T>> OrgFreedesktopPortalSession
    for blocking::Proxy<'a, C>
{
    fn close(&self) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.portal.Session", "Close", ())
    }

    fn version(&self) -> Result<u32, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.portal.Session",
            "version",
        )
    }
}

#[derive(Debug)]
pub struct OrgFreedesktopPortalSessionClosed {
    pub details: arg::PropMap,
}

impl arg::AppendAll for OrgFreedesktopPortalSessionClosed {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.details, i);
    }
}

impl arg::ReadAll for OrgFreedesktopPortalSessionClosed {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgFreedesktopPortalSessionClosed { details: i.read()? })
    }
}

impl dbus::message::SignalArgs for OrgFreedesktopPortalSessionClosed {
    const NAME: &'static str = "Closed";
    const INTERFACE: &'static str = "org.freedesktop.portal.Session";
}
